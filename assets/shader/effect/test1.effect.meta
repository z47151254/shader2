{
  "ver": "1.0.25",
  "uuid": "d7ee6aea-a372-46fc-80e4-a1ab640a5d26",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D texture2;\nuniform sampler2D texture_polygon;\n#endif\n#if USE_COLOR\n#endif\n#if USE_DYNAMIC\nuniform int is_water;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 a_color = v_color;\n  vec2 uv = v_uv0;\n  #if USE_TEXTURE\n    #if USE_DYNAMIC\n    #endif\n    #if USE_COLOR\n    #endif\n    if(is_water == 1){\n        if(uv.y > 0.4 + sin(uv.x * 12.35+ cc_time.x)*0.02 ) {\n            uv.y = uv.y - sin(uv.x*12.35+ cc_time.x)*0.02;\n            vec4 waterColor = vec4(2,199,255,255);\n              a_color = (normalize(waterColor)+a_color)/2.0;\n        }\n    }\n     if(is_water == 1){\n     }\n  vec4 texture_tmp = texture2D(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= a_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D texture2;\nuniform sampler2D texture_polygon;\n#endif\n#if USE_COLOR\nuniform color{\n  vec4 beginColor;\n  vec4 endColor;\n};\n#endif\n#if USE_DYNAMIC\nuniform global{\n  float amplitude;\n  float angularSpeed;\n  float moveSpeed;\n  float detaY;\n  int is_water = 0;\n};\n#endif\nuniform img{\n  vec2 size;\n  float cutValue;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 a_color = v_color;\n  vec2 uv = v_uv0;\n  #if USE_TEXTURE\n    #if USE_DYNAMIC\n    #endif\n    #if USE_COLOR\n    #endif\n    if(is_water == 1){\n        if(uv.y > 0.4 + sin(uv.x * 12.35+ cc_time.x)*0.02 ) {\n            uv.y = uv.y - sin(uv.x*12.35+ cc_time.x)*0.02;\n            vec4 waterColor = vec4(2,199,255,255);\n              a_color = (normalize(waterColor)+a_color)/2.0;\n        }\n    }\n     if(is_water == 1){\n     }\n  vec4 texture_tmp = texture(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= a_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}